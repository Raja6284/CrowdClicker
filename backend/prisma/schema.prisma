// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" //dont forget to remove the output
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int    @id @default(autoincrement())
  address        String @unique
  Task           Task[]
  payouts       Payouts[]
}

//every user can have multiple tasks
model Task {
  id          Int          @id @default(autoincrement())
  title       String       @default("Click the best one you like")
  options     Option[]
  signature   String
  amount      Int
  done        Boolean      @default(false)
  user_id     Int
  user        User         @relation(fields: [user_id], references: [id])
  submissions Submission[]
}

//every task can have multiple options
model Option {
  id          Int          @id @default(autoincrement())
  image_url   String
  task_id     Int
  task        Task         @relation(fields: [task_id], references: [id])
  submissions Submission[]
}

model Worker {
  id          Int          @id @default(autoincrement())
  address     String       @unique
  pending_amount Int    
  locked_amount  Int    
  submissions Submission[]
}

model Submission {
  id        Int    @id @default(autoincrement())
  worker_id Int
  worker    Worker @relation(fields: [worker_id], references: [id])
  option_id Int
  option    Option @relation(fields: [option_id], references: [id])
  task_id   Int
  task      Task   @relation(fields: [task_id], references: [id])
  amount    Int
  @@unique([worker_id,task_id])
}


model Payouts {
  id            Int     @id @default(autoincrement())
  user_id       Int
  user          User    @relation(fields: [user_id],references: [id])
  amount        Int
  signature     String
  status        TxnStatus
}

enum TxnStatus {
  Processing
  Success
  Failure
}